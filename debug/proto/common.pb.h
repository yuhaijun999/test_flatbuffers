// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace dingodb {
namespace pb {
namespace common {
class ScalarField;
struct ScalarFieldDefaultTypeInternal;
extern ScalarFieldDefaultTypeInternal _ScalarField_default_instance_;
class ScalarValue;
struct ScalarValueDefaultTypeInternal;
extern ScalarValueDefaultTypeInternal _ScalarValue_default_instance_;
class VectorScalardata;
struct VectorScalardataDefaultTypeInternal;
extern VectorScalardataDefaultTypeInternal _VectorScalardata_default_instance_;
class VectorScalardata_ScalarDataEntry_DoNotUse;
struct VectorScalardata_ScalarDataEntry_DoNotUseDefaultTypeInternal;
extern VectorScalardata_ScalarDataEntry_DoNotUseDefaultTypeInternal _VectorScalardata_ScalarDataEntry_DoNotUse_default_instance_;
}  // namespace common
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> ::dingodb::pb::common::ScalarField* Arena::CreateMaybeMessage<::dingodb::pb::common::ScalarField>(Arena*);
template<> ::dingodb::pb::common::ScalarValue* Arena::CreateMaybeMessage<::dingodb::pb::common::ScalarValue>(Arena*);
template<> ::dingodb::pb::common::VectorScalardata* Arena::CreateMaybeMessage<::dingodb::pb::common::VectorScalardata>(Arena*);
template<> ::dingodb::pb::common::VectorScalardata_ScalarDataEntry_DoNotUse* Arena::CreateMaybeMessage<::dingodb::pb::common::VectorScalardata_ScalarDataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dingodb {
namespace pb {
namespace common {

enum ScalarFieldType : int {
  NONE = 0,
  BOOL = 1,
  INT8 = 2,
  INT16 = 3,
  INT32 = 4,
  INT64 = 5,
  FLOAT32 = 6,
  DOUBLE = 7,
  STRING = 8,
  BYTES = 9,
  ScalarFieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ScalarFieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ScalarFieldType_IsValid(int value);
constexpr ScalarFieldType ScalarFieldType_MIN = NONE;
constexpr ScalarFieldType ScalarFieldType_MAX = BYTES;
constexpr int ScalarFieldType_ARRAYSIZE = ScalarFieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScalarFieldType_descriptor();
template<typename T>
inline const std::string& ScalarFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScalarFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScalarFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScalarFieldType_descriptor(), enum_t_value);
}
inline bool ScalarFieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScalarFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScalarFieldType>(
    ScalarFieldType_descriptor(), name, value);
}
// ===================================================================

class VectorScalardata_ScalarDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VectorScalardata_ScalarDataEntry_DoNotUse, 
    std::string, ::dingodb::pb::common::ScalarValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VectorScalardata_ScalarDataEntry_DoNotUse, 
    std::string, ::dingodb::pb::common::ScalarValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  VectorScalardata_ScalarDataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR VectorScalardata_ScalarDataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VectorScalardata_ScalarDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VectorScalardata_ScalarDataEntry_DoNotUse& other);
  static const VectorScalardata_ScalarDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VectorScalardata_ScalarDataEntry_DoNotUse*>(&_VectorScalardata_ScalarDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dingodb.pb.common.VectorScalardata.ScalarDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class VectorScalardata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.VectorScalardata) */ {
 public:
  inline VectorScalardata() : VectorScalardata(nullptr) {}
  ~VectorScalardata() override;
  explicit PROTOBUF_CONSTEXPR VectorScalardata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorScalardata(const VectorScalardata& from);
  VectorScalardata(VectorScalardata&& from) noexcept
    : VectorScalardata() {
    *this = ::std::move(from);
  }

  inline VectorScalardata& operator=(const VectorScalardata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorScalardata& operator=(VectorScalardata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorScalardata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorScalardata* internal_default_instance() {
    return reinterpret_cast<const VectorScalardata*>(
               &_VectorScalardata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorScalardata& a, VectorScalardata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorScalardata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorScalardata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorScalardata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorScalardata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorScalardata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorScalardata& from) {
    VectorScalardata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorScalardata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.VectorScalardata";
  }
  protected:
  explicit VectorScalardata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kScalarDataFieldNumber = 1,
  };
  // map<string, .dingodb.pb.common.ScalarValue> scalar_data = 1;
  int scalar_data_size() const;
  private:
  int _internal_scalar_data_size() const;
  public:
  void clear_scalar_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >&
      _internal_scalar_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >*
      _internal_mutable_scalar_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >&
      scalar_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >*
      mutable_scalar_data();

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.VectorScalardata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        VectorScalardata_ScalarDataEntry_DoNotUse,
        std::string, ::dingodb::pb::common::ScalarValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> scalar_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ScalarField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.ScalarField) */ {
 public:
  inline ScalarField() : ScalarField(nullptr) {}
  ~ScalarField() override;
  explicit PROTOBUF_CONSTEXPR ScalarField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarField(const ScalarField& from);
  ScalarField(ScalarField&& from) noexcept
    : ScalarField() {
    *this = ::std::move(from);
  }

  inline ScalarField& operator=(const ScalarField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarField& operator=(ScalarField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarField& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kBoolData = 1,
    kIntData = 2,
    kLongData = 3,
    kFloatData = 4,
    kDoubleData = 5,
    kStringData = 6,
    kBytesData = 7,
    DATA_NOT_SET = 0,
  };

  static inline const ScalarField* internal_default_instance() {
    return reinterpret_cast<const ScalarField*>(
               &_ScalarField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScalarField& a, ScalarField& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarField& from) {
    ScalarField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.ScalarField";
  }
  protected:
  explicit ScalarField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolDataFieldNumber = 1,
    kIntDataFieldNumber = 2,
    kLongDataFieldNumber = 3,
    kFloatDataFieldNumber = 4,
    kDoubleDataFieldNumber = 5,
    kStringDataFieldNumber = 6,
    kBytesDataFieldNumber = 7,
  };
  // bool bool_data = 1;
  bool has_bool_data() const;
  private:
  bool _internal_has_bool_data() const;
  public:
  void clear_bool_data();
  bool bool_data() const;
  void set_bool_data(bool value);
  private:
  bool _internal_bool_data() const;
  void _internal_set_bool_data(bool value);
  public:

  // int32 int_data = 2;
  bool has_int_data() const;
  private:
  bool _internal_has_int_data() const;
  public:
  void clear_int_data();
  int32_t int_data() const;
  void set_int_data(int32_t value);
  private:
  int32_t _internal_int_data() const;
  void _internal_set_int_data(int32_t value);
  public:

  // int64 long_data = 3;
  bool has_long_data() const;
  private:
  bool _internal_has_long_data() const;
  public:
  void clear_long_data();
  int64_t long_data() const;
  void set_long_data(int64_t value);
  private:
  int64_t _internal_long_data() const;
  void _internal_set_long_data(int64_t value);
  public:

  // float float_data = 4;
  bool has_float_data() const;
  private:
  bool _internal_has_float_data() const;
  public:
  void clear_float_data();
  float float_data() const;
  void set_float_data(float value);
  private:
  float _internal_float_data() const;
  void _internal_set_float_data(float value);
  public:

  // double double_data = 5;
  bool has_double_data() const;
  private:
  bool _internal_has_double_data() const;
  public:
  void clear_double_data();
  double double_data() const;
  void set_double_data(double value);
  private:
  double _internal_double_data() const;
  void _internal_set_double_data(double value);
  public:

  // string string_data = 6;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_data();
  PROTOBUF_NODISCARD std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // bytes bytes_data = 7;
  bool has_bytes_data() const;
  private:
  bool _internal_has_bytes_data() const;
  public:
  void clear_bytes_data();
  const std::string& bytes_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_data();
  PROTOBUF_NODISCARD std::string* release_bytes_data();
  void set_allocated_bytes_data(std::string* bytes_data);
  private:
  const std::string& _internal_bytes_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_data(const std::string& value);
  std::string* _internal_mutable_bytes_data();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:dingodb.pb.common.ScalarField)
 private:
  class _Internal;
  void set_has_bool_data();
  void set_has_int_data();
  void set_has_long_data();
  void set_has_float_data();
  void set_has_double_data();
  void set_has_string_data();
  void set_has_bytes_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool bool_data_;
      int32_t int_data_;
      int64_t long_data_;
      float float_data_;
      double double_data_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_data_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ScalarValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.ScalarValue) */ {
 public:
  inline ScalarValue() : ScalarValue(nullptr) {}
  ~ScalarValue() override;
  explicit PROTOBUF_CONSTEXPR ScalarValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarValue(const ScalarValue& from);
  ScalarValue(ScalarValue&& from) noexcept
    : ScalarValue() {
    *this = ::std::move(from);
  }

  inline ScalarValue& operator=(const ScalarValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarValue& operator=(ScalarValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarValue* internal_default_instance() {
    return reinterpret_cast<const ScalarValue*>(
               &_ScalarValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScalarValue& a, ScalarValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarValue& from) {
    ScalarValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.ScalarValue";
  }
  protected:
  explicit ScalarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kFieldTypeFieldNumber = 1,
  };
  // repeated .dingodb.pb.common.ScalarField fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::dingodb::pb::common::ScalarField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::ScalarField >*
      mutable_fields();
  private:
  const ::dingodb::pb::common::ScalarField& _internal_fields(int index) const;
  ::dingodb::pb::common::ScalarField* _internal_add_fields();
  public:
  const ::dingodb::pb::common::ScalarField& fields(int index) const;
  ::dingodb::pb::common::ScalarField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::ScalarField >&
      fields() const;

  // .dingodb.pb.common.ScalarFieldType field_type = 1;
  void clear_field_type();
  ::dingodb::pb::common::ScalarFieldType field_type() const;
  void set_field_type(::dingodb::pb::common::ScalarFieldType value);
  private:
  ::dingodb::pb::common::ScalarFieldType _internal_field_type() const;
  void _internal_set_field_type(::dingodb::pb::common::ScalarFieldType value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.ScalarValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::ScalarField > fields_;
    int field_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VectorScalardata

// map<string, .dingodb.pb.common.ScalarValue> scalar_data = 1;
inline int VectorScalardata::_internal_scalar_data_size() const {
  return _impl_.scalar_data_.size();
}
inline int VectorScalardata::scalar_data_size() const {
  return _internal_scalar_data_size();
}
inline void VectorScalardata::clear_scalar_data() {
  _impl_.scalar_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >&
VectorScalardata::_internal_scalar_data() const {
  return _impl_.scalar_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >&
VectorScalardata::scalar_data() const {
  // @@protoc_insertion_point(field_map:dingodb.pb.common.VectorScalardata.scalar_data)
  return _internal_scalar_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >*
VectorScalardata::_internal_mutable_scalar_data() {
  return _impl_.scalar_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::common::ScalarValue >*
VectorScalardata::mutable_scalar_data() {
  // @@protoc_insertion_point(field_mutable_map:dingodb.pb.common.VectorScalardata.scalar_data)
  return _internal_mutable_scalar_data();
}

// -------------------------------------------------------------------

// ScalarField

// bool bool_data = 1;
inline bool ScalarField::_internal_has_bool_data() const {
  return data_case() == kBoolData;
}
inline bool ScalarField::has_bool_data() const {
  return _internal_has_bool_data();
}
inline void ScalarField::set_has_bool_data() {
  _impl_._oneof_case_[0] = kBoolData;
}
inline void ScalarField::clear_bool_data() {
  if (_internal_has_bool_data()) {
    _impl_.data_.bool_data_ = false;
    clear_has_data();
  }
}
inline bool ScalarField::_internal_bool_data() const {
  if (_internal_has_bool_data()) {
    return _impl_.data_.bool_data_;
  }
  return false;
}
inline void ScalarField::_internal_set_bool_data(bool value) {
  if (!_internal_has_bool_data()) {
    clear_data();
    set_has_bool_data();
  }
  _impl_.data_.bool_data_ = value;
}
inline bool ScalarField::bool_data() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarField.bool_data)
  return _internal_bool_data();
}
inline void ScalarField::set_bool_data(bool value) {
  _internal_set_bool_data(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarField.bool_data)
}

// int32 int_data = 2;
inline bool ScalarField::_internal_has_int_data() const {
  return data_case() == kIntData;
}
inline bool ScalarField::has_int_data() const {
  return _internal_has_int_data();
}
inline void ScalarField::set_has_int_data() {
  _impl_._oneof_case_[0] = kIntData;
}
inline void ScalarField::clear_int_data() {
  if (_internal_has_int_data()) {
    _impl_.data_.int_data_ = 0;
    clear_has_data();
  }
}
inline int32_t ScalarField::_internal_int_data() const {
  if (_internal_has_int_data()) {
    return _impl_.data_.int_data_;
  }
  return 0;
}
inline void ScalarField::_internal_set_int_data(int32_t value) {
  if (!_internal_has_int_data()) {
    clear_data();
    set_has_int_data();
  }
  _impl_.data_.int_data_ = value;
}
inline int32_t ScalarField::int_data() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarField.int_data)
  return _internal_int_data();
}
inline void ScalarField::set_int_data(int32_t value) {
  _internal_set_int_data(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarField.int_data)
}

// int64 long_data = 3;
inline bool ScalarField::_internal_has_long_data() const {
  return data_case() == kLongData;
}
inline bool ScalarField::has_long_data() const {
  return _internal_has_long_data();
}
inline void ScalarField::set_has_long_data() {
  _impl_._oneof_case_[0] = kLongData;
}
inline void ScalarField::clear_long_data() {
  if (_internal_has_long_data()) {
    _impl_.data_.long_data_ = int64_t{0};
    clear_has_data();
  }
}
inline int64_t ScalarField::_internal_long_data() const {
  if (_internal_has_long_data()) {
    return _impl_.data_.long_data_;
  }
  return int64_t{0};
}
inline void ScalarField::_internal_set_long_data(int64_t value) {
  if (!_internal_has_long_data()) {
    clear_data();
    set_has_long_data();
  }
  _impl_.data_.long_data_ = value;
}
inline int64_t ScalarField::long_data() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarField.long_data)
  return _internal_long_data();
}
inline void ScalarField::set_long_data(int64_t value) {
  _internal_set_long_data(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarField.long_data)
}

// float float_data = 4;
inline bool ScalarField::_internal_has_float_data() const {
  return data_case() == kFloatData;
}
inline bool ScalarField::has_float_data() const {
  return _internal_has_float_data();
}
inline void ScalarField::set_has_float_data() {
  _impl_._oneof_case_[0] = kFloatData;
}
inline void ScalarField::clear_float_data() {
  if (_internal_has_float_data()) {
    _impl_.data_.float_data_ = 0;
    clear_has_data();
  }
}
inline float ScalarField::_internal_float_data() const {
  if (_internal_has_float_data()) {
    return _impl_.data_.float_data_;
  }
  return 0;
}
inline void ScalarField::_internal_set_float_data(float value) {
  if (!_internal_has_float_data()) {
    clear_data();
    set_has_float_data();
  }
  _impl_.data_.float_data_ = value;
}
inline float ScalarField::float_data() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarField.float_data)
  return _internal_float_data();
}
inline void ScalarField::set_float_data(float value) {
  _internal_set_float_data(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarField.float_data)
}

// double double_data = 5;
inline bool ScalarField::_internal_has_double_data() const {
  return data_case() == kDoubleData;
}
inline bool ScalarField::has_double_data() const {
  return _internal_has_double_data();
}
inline void ScalarField::set_has_double_data() {
  _impl_._oneof_case_[0] = kDoubleData;
}
inline void ScalarField::clear_double_data() {
  if (_internal_has_double_data()) {
    _impl_.data_.double_data_ = 0;
    clear_has_data();
  }
}
inline double ScalarField::_internal_double_data() const {
  if (_internal_has_double_data()) {
    return _impl_.data_.double_data_;
  }
  return 0;
}
inline void ScalarField::_internal_set_double_data(double value) {
  if (!_internal_has_double_data()) {
    clear_data();
    set_has_double_data();
  }
  _impl_.data_.double_data_ = value;
}
inline double ScalarField::double_data() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarField.double_data)
  return _internal_double_data();
}
inline void ScalarField::set_double_data(double value) {
  _internal_set_double_data(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarField.double_data)
}

// string string_data = 6;
inline bool ScalarField::_internal_has_string_data() const {
  return data_case() == kStringData;
}
inline bool ScalarField::has_string_data() const {
  return _internal_has_string_data();
}
inline void ScalarField::set_has_string_data() {
  _impl_._oneof_case_[0] = kStringData;
}
inline void ScalarField::clear_string_data() {
  if (_internal_has_string_data()) {
    _impl_.data_.string_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& ScalarField::string_data() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarField.string_data)
  return _internal_string_data();
}
template <typename ArgT0, typename... ArgT>
inline void ScalarField::set_string_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_data()) {
    clear_data();
    set_has_string_data();
    _impl_.data_.string_data_.InitDefault();
  }
  _impl_.data_.string_data_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarField.string_data)
}
inline std::string* ScalarField::mutable_string_data() {
  std::string* _s = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.ScalarField.string_data)
  return _s;
}
inline const std::string& ScalarField::_internal_string_data() const {
  if (_internal_has_string_data()) {
    return _impl_.data_.string_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScalarField::_internal_set_string_data(const std::string& value) {
  if (!_internal_has_string_data()) {
    clear_data();
    set_has_string_data();
    _impl_.data_.string_data_.InitDefault();
  }
  _impl_.data_.string_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ScalarField::_internal_mutable_string_data() {
  if (!_internal_has_string_data()) {
    clear_data();
    set_has_string_data();
    _impl_.data_.string_data_.InitDefault();
  }
  return _impl_.data_.string_data_.Mutable(      GetArenaForAllocation());
}
inline std::string* ScalarField::release_string_data() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.ScalarField.string_data)
  if (_internal_has_string_data()) {
    clear_has_data();
    return _impl_.data_.string_data_.Release();
  } else {
    return nullptr;
  }
}
inline void ScalarField::set_allocated_string_data(std::string* string_data) {
  if (has_data()) {
    clear_data();
  }
  if (string_data != nullptr) {
    set_has_string_data();
    _impl_.data_.string_data_.InitAllocated(string_data, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.ScalarField.string_data)
}

// bytes bytes_data = 7;
inline bool ScalarField::_internal_has_bytes_data() const {
  return data_case() == kBytesData;
}
inline bool ScalarField::has_bytes_data() const {
  return _internal_has_bytes_data();
}
inline void ScalarField::set_has_bytes_data() {
  _impl_._oneof_case_[0] = kBytesData;
}
inline void ScalarField::clear_bytes_data() {
  if (_internal_has_bytes_data()) {
    _impl_.data_.bytes_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& ScalarField::bytes_data() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarField.bytes_data)
  return _internal_bytes_data();
}
template <typename ArgT0, typename... ArgT>
inline void ScalarField::set_bytes_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    _impl_.data_.bytes_data_.InitDefault();
  }
  _impl_.data_.bytes_data_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarField.bytes_data)
}
inline std::string* ScalarField::mutable_bytes_data() {
  std::string* _s = _internal_mutable_bytes_data();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.ScalarField.bytes_data)
  return _s;
}
inline const std::string& ScalarField::_internal_bytes_data() const {
  if (_internal_has_bytes_data()) {
    return _impl_.data_.bytes_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScalarField::_internal_set_bytes_data(const std::string& value) {
  if (!_internal_has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    _impl_.data_.bytes_data_.InitDefault();
  }
  _impl_.data_.bytes_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ScalarField::_internal_mutable_bytes_data() {
  if (!_internal_has_bytes_data()) {
    clear_data();
    set_has_bytes_data();
    _impl_.data_.bytes_data_.InitDefault();
  }
  return _impl_.data_.bytes_data_.Mutable(      GetArenaForAllocation());
}
inline std::string* ScalarField::release_bytes_data() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.ScalarField.bytes_data)
  if (_internal_has_bytes_data()) {
    clear_has_data();
    return _impl_.data_.bytes_data_.Release();
  } else {
    return nullptr;
  }
}
inline void ScalarField::set_allocated_bytes_data(std::string* bytes_data) {
  if (has_data()) {
    clear_data();
  }
  if (bytes_data != nullptr) {
    set_has_bytes_data();
    _impl_.data_.bytes_data_.InitAllocated(bytes_data, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.ScalarField.bytes_data)
}

inline bool ScalarField::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ScalarField::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline ScalarField::DataCase ScalarField::data_case() const {
  return ScalarField::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScalarValue

// .dingodb.pb.common.ScalarFieldType field_type = 1;
inline void ScalarValue::clear_field_type() {
  _impl_.field_type_ = 0;
}
inline ::dingodb::pb::common::ScalarFieldType ScalarValue::_internal_field_type() const {
  return static_cast< ::dingodb::pb::common::ScalarFieldType >(_impl_.field_type_);
}
inline ::dingodb::pb::common::ScalarFieldType ScalarValue::field_type() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarValue.field_type)
  return _internal_field_type();
}
inline void ScalarValue::_internal_set_field_type(::dingodb::pb::common::ScalarFieldType value) {
  
  _impl_.field_type_ = value;
}
inline void ScalarValue::set_field_type(::dingodb::pb::common::ScalarFieldType value) {
  _internal_set_field_type(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.ScalarValue.field_type)
}

// repeated .dingodb.pb.common.ScalarField fields = 2;
inline int ScalarValue::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int ScalarValue::fields_size() const {
  return _internal_fields_size();
}
inline void ScalarValue::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::dingodb::pb::common::ScalarField* ScalarValue::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.ScalarValue.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::ScalarField >*
ScalarValue::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.common.ScalarValue.fields)
  return &_impl_.fields_;
}
inline const ::dingodb::pb::common::ScalarField& ScalarValue::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::dingodb::pb::common::ScalarField& ScalarValue::fields(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.ScalarValue.fields)
  return _internal_fields(index);
}
inline ::dingodb::pb::common::ScalarField* ScalarValue::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::dingodb::pb::common::ScalarField* ScalarValue::add_fields() {
  ::dingodb::pb::common::ScalarField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:dingodb.pb.common.ScalarValue.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::ScalarField >&
ScalarValue::fields() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.common.ScalarValue.fields)
  return _impl_.fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace pb
}  // namespace dingodb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dingodb::pb::common::ScalarFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dingodb::pb::common::ScalarFieldType>() {
  return ::dingodb::pb::common::ScalarFieldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
